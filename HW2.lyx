#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{algorithm,algpseudocode}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Algorithmic Game Theory - HW2
\end_layout

\begin_layout Author
Ido Kessler - 311398499, Jonathan Somer - 307923383
\end_layout

\begin_layout Part
Gross substitute valuations
\end_layout

\begin_layout Section*
Problem 1:
\end_layout

\begin_layout Subsection*
Part 1 - 
\begin_inset Formula $S_{t}$
\end_inset

 maximizes utility:
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $v$
\end_inset

 be a GS valuation, 
\begin_inset Formula $[m]=<1,....,m>$
\end_inset

 the greedy ordering of items.
 We shall prove that for any 
\begin_inset Formula $t\in\{1,..,m\}$
\end_inset

 the set 
\begin_inset Formula $S_{t}=\{1,...,t\}$
\end_inset

 satisfies:
\begin_inset Formula 
\[
S_{t}=\underset{T\subseteq U;|T|=t}{\text{argmax}}v(T)-\sum_{j\in T}p_{j}=\underset{T\subseteq U;|T|=t}{\text{argmax}}u(T)
\]

\end_inset

 We use the following facts: 
\end_layout

\begin_layout Enumerate
For any GS 
\begin_inset Formula $v$
\end_inset

, then for any 
\begin_inset Formula ${\bf p}$
\end_inset

 
\begin_inset Formula $v'$
\end_inset

 defined by 
\begin_inset Formula $v'(S)=v(S)-\sum_{j\in S}p_{j}$
\end_inset

 is GS.
\end_layout

\begin_layout Enumerate
For any GS 
\begin_inset Formula $v$
\end_inset

, then for any 
\begin_inset Formula $S\subseteq[m]$
\end_inset

 and 
\begin_inset Formula $T\subseteq[m]\backslash S$
\end_inset

, s.t 
\begin_inset Formula $|T|\geq2$
\end_inset

 then for every 
\begin_inset Formula $i\in T$
\end_inset

:
\begin_inset Formula $v(i|S)+v(T\backslash\{i\}|S)\leq\underset{j\in T,j\neq i}{\text{max}}\{v(j|S)+v(T\backslash\{j\}|S)\}$
\end_inset


\end_layout

\begin_layout Standard

\series bold
Proof:
\series default
 1
\begin_inset Newline newline
\end_inset

Let there be some 
\begin_inset Formula $t\in\{1,..,m\}$
\end_inset

.
 We shall prove that 
\begin_inset Formula $S_{t}=\underset{T\subseteq U;|T|=t}{\text{argmax}}u(T)$
\end_inset

.
 For this 
\begin_inset Formula $t$
\end_inset

 we will prove the claim by induction that at each stage of the algorithm
 the current set 
\begin_inset Formula $S_{k}$
\end_inset

 where 
\begin_inset Formula $k\in\{0,1,...,t\}$
\end_inset

 us a subset of some 
\begin_inset Formula $t$
\end_inset

 sized set which maximizes 
\begin_inset Formula $u(\cdot)$
\end_inset

 and we define 
\begin_inset Formula $S_{0}=\emptyset$
\end_inset

.
\begin_inset Newline newline
\end_inset


\series bold
Base Case 
\begin_inset Formula $k=0$
\end_inset

:
\begin_inset Newline newline
\end_inset


\series default
We are immediately before the first iteration of the while loop.
 The empty set is of course a subset of some 
\begin_inset Formula $t$
\end_inset

 sized utility maximizing set so the condition holds in the algorithm's
 initial state.
\begin_inset Newline newline
\end_inset


\series bold
Assume for 
\begin_inset Formula $k-1$
\end_inset

:
\begin_inset Newline newline
\end_inset


\series default
We also assume that 
\begin_inset Formula $1\leq k\leq t$
\end_inset

.
 By the inductive assumption we have for 
\begin_inset Formula $S^{*}$
\end_inset

, some 
\begin_inset Formula $t$
\end_inset

 sized set which maximizes 
\begin_inset Formula $u(\cdot)$
\end_inset

, that 
\begin_inset Formula $S_{k-1}\subseteq S^{*}$
\end_inset

.
 Denote by 
\begin_inset Formula $x_{k}$
\end_inset

 the element added to 
\begin_inset Formula $S_{k-1}$
\end_inset

 at the 
\begin_inset Formula $k^{th}$
\end_inset

 iteration.
\begin_inset Newline newline
\end_inset

If 
\begin_inset Formula $x_{k}\in S^{*}$
\end_inset

 then 
\begin_inset Formula $S_{k}=S_{k-1}\cup\{x_{k}\}\subseteq S^{*}$
\end_inset

 and we are done.
\begin_inset Newline newline
\end_inset

Assume 
\begin_inset Formula $x_{k}\notin S^{*}$
\end_inset

.
 Define 
\begin_inset Formula $T^{*}$
\end_inset

 to be 
\begin_inset Formula $S^{*}\backslash S_{k-1}$
\end_inset

.
 We now apply lemma 
\begin_inset Formula $(2)$
\end_inset

 Using:
\end_layout

\begin_layout Itemize
\begin_inset Formula $S=S_{k-1}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $T=T^{*}\cup\{x_{k}\}$
\end_inset

 (note that 
\begin_inset Formula $|T^{*}|\geq1$
\end_inset

 so 
\begin_inset Formula $|T|\geq2$
\end_inset

 as needed)
\end_layout

\begin_layout Itemize
\begin_inset Formula $i=x_{k}$
\end_inset


\end_layout

\begin_layout Itemize
Using lemma 
\begin_inset Formula $(1)$
\end_inset

: we use for 
\begin_inset Formula $v$
\end_inset

 the 
\begin_inset Formula $GS$
\end_inset

 valuation 
\begin_inset Formula $u(S)=v(S)-\sum_{j\in S}p_{j}$
\end_inset

 
\end_layout

\begin_layout Standard
In total we have: 
\begin_inset Formula 
\[
u(x_{k}|S_{k-1})+u(T^{*}\cup\{x_{k}\}\backslash\{x_{k}\}|S_{k-1})\leq\underset{j\in T,j\neq i}{\text{max}}\{u(j|S_{k-1})+u(T^{*}\cup\{x_{k}\}\backslash\{j\}|S_{k-1})\}
\]

\end_inset

 So for some 
\begin_inset Formula $j$
\end_inset

 we have:
\begin_inset Formula 
\[
u(x_{k}|S_{k-1})+u(T^{*}|S_{k-1})\leq u(j|S_{k-1})+u(T^{*}\cup\{x_{k}\}\backslash\{j\}|S_{k-1})\}
\]

\end_inset

 Recall that the greedy algorithm chose: 
\begin_inset Formula 
\begin{align*}
x_{k} & \in\underset{j\in[m]}{\text{argmax}}v(j|S_{k-1})-p_{j}\\
 & =\underset{j\in[m]}{\text{argmax}}v(\{j\}\cup S_{k-1})-v(S_{k-1})-p_{j}\\
 & =\underset{j\in[m]}{\text{argmax}}\left[v(\{j\}\cup S_{k-1})-\sum_{i\in\{j\}\cup S_{k-1}}p_{i}\right]-\left[v(S_{k-1})-\sum_{i\in S_{k-1}}p_{i}\right]\\
 & =\underset{j\in[m]}{\text{argmax}}u(\{j\}\cup S_{k-1})-u(S_{k-1})\\
 & =\underset{j\in[m]}{\text{argmax}}u(j|S_{k-1})
\end{align*}

\end_inset

 So as a result we have:
\begin_inset Formula 
\[
u(x_{k}|S_{k-1})\geq u(j|S_{k-1})
\]

\end_inset

 Using this fact we know that:
\begin_inset Formula 
\[
u(T^{*}|S_{k-1})\leq u(T^{*}\cup\{x_{k}\}\backslash\{j\}|S_{k-1})
\]

\end_inset

 Add 
\begin_inset Formula $u(S_{k-1})$
\end_inset

 to both sides:
\begin_inset Formula 
\[
u(T^{*}|S_{k-1})+u(S_{k-1})\leq u(T^{*}\cup\{x_{k}\}\backslash\{j\}|S_{k-1})+u(S_{k-1})
\]

\end_inset

 Equivalently:
\begin_inset Formula 
\[
u(S^{*})\leq u(T^{*}\cup\{x_{k}\}\backslash\{j\}\cup S_{k-1})
\]

\end_inset

Where 
\begin_inset Formula $T^{*}\cup\{x_{k}\}\backslash\{j\}\cup S_{k-1}$
\end_inset

 is a 
\begin_inset Formula $t$
\end_inset

 sized set, and we have acheived a utility of at least that of 
\begin_inset Formula $S^{*}$
\end_inset

.
 Of course 
\begin_inset Formula $S_{k-1}$
\end_inset

 is a subset of this set so we are done with the induction.
\begin_inset Newline newline
\end_inset

Now for 
\begin_inset Formula $k=t$
\end_inset

 we have that the set 
\begin_inset Formula $S_{t}$
\end_inset

 is a set of size 
\begin_inset Formula $t$
\end_inset

 which maximizes the utility as needed.
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Subsection*
Part 2 - GS valuations are Submodular valutions:
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $v$
\end_inset

 be some GS valuation over 
\begin_inset Formula $[m].$
\end_inset

 Let there be some 
\begin_inset Formula $S\subseteq T\subseteq[m]$
\end_inset

.
 We shall show that for every 
\begin_inset Formula $i\notin T$
\end_inset

: 
\begin_inset Formula $v(i|S)\geq v(i|T)$
\end_inset

.
 Let there be some 
\begin_inset Formula $j\notin T$
\end_inset

 we will show:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(S\cup\{j\})-v(S)\geq v(T\cup\{j\})-v(T)
\]

\end_inset

 We define 
\begin_inset Formula ${\bf p}(i)=\begin{cases}
0 & i\in T\cup\{j\}\\
+\infty & \text{else}
\end{cases}$
\end_inset


\begin_inset Newline newline
\end_inset

It is clear that 
\begin_inset Formula $T\cup\{j\}\in D({\bf p})$
\end_inset

 as all prices of items in this set are 
\begin_inset Formula $0$
\end_inset

 and we assume monotonicity of 
\begin_inset Formula $v$
\end_inset

.
 Define 
\begin_inset Formula $\epsilon=v(T\cup\{j\})-v(T)=v(j|T)$
\end_inset


\begin_inset Newline newline
\end_inset

We now define 
\begin_inset Formula ${\bf p}^{\epsilon}=\begin{cases}
{\bf p}(i) & i\neq j\\
{\bf p}(j)+\epsilon=\epsilon & i=j
\end{cases}$
\end_inset


\begin_inset Newline newline
\end_inset

It is clear that 
\begin_inset Formula ${\bf p}^{\epsilon}\geq{\bf p}$
\end_inset

.
 And the only item for which there is a strict increase is 
\begin_inset Formula $j$
\end_inset

.
 By the GS assumption we have that there exists some 
\begin_inset Formula $B\subseteq[m]$
\end_inset

 s.t:
\begin_inset Formula 
\[
T\cup B\in D({\bf p}^{\epsilon})
\]

\end_inset

It is clear that all items which have 
\begin_inset Formula $+\infty$
\end_inset

 pricing are not in any demand set.
 By the way we defined the price of 
\begin_inset Formula $j$
\end_inset

 we have:
\begin_inset Formula 
\[
v(T\cup\{j\})-\sum_{i\in T\cup\{j\}}p_{i}=v(T)+v(j|T)-\sum_{i\in T}p_{i}-p_{j}=v(T)+v(j|T)-\sum_{i\in T}p_{i}-p_{j}=v(T)-\sum_{i\in T}p_{i}
\]

\end_inset

 So both 
\begin_inset Formula $T$
\end_inset

 and 
\begin_inset Formula $T\cup\{j\}$
\end_inset

 have the same utility and are both in 
\begin_inset Formula $D({\bf p}^{\epsilon})$
\end_inset

.
\begin_inset Newline newline
\end_inset

We now define 
\begin_inset Formula ${\bf q}^{\epsilon}=\begin{cases}
{\bf p}^{\epsilon}(i) & i\notin T\backslash S\\
+\infty & i\in T\backslash S
\end{cases}$
\end_inset


\begin_inset Newline newline
\end_inset

It is clear that 
\begin_inset Formula ${\bf q}^{\epsilon}\geq{\bf p}^{\epsilon}$
\end_inset

.
 By the GS assumption, and the previous result that 
\begin_inset Formula $T\cup\{j\}\in D({\bf p}^{\epsilon})$
\end_inset

 we have that exists some 
\begin_inset Formula $C\subseteq[m]$
\end_inset

 s.t:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
(S\cup\{j\})\cup C\in D({\bf q}^{\epsilon})
\]

\end_inset

It is clear that all items with 
\begin_inset Formula $+\infty$
\end_inset

 pricing are not part of any set in 
\begin_inset Formula $D({\bf q}^{\epsilon})$
\end_inset

, so 
\begin_inset Formula $S\cup\{j\}\in D({\bf q}^{\epsilon})$
\end_inset

.
 By definition we have the the utility of 
\begin_inset Formula $S\cup\{j\}$
\end_inset

 us at least that of 
\begin_inset Formula $S$
\end_inset

.
 So:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(S\cup\{j\})-\sum_{i\in S\cup\{j\}}p_{i}\geq v(S)-\sum_{i\in S}p_{i}
\]

\end_inset

 Haavarat agafim:
\begin_inset Formula 
\[
v(S\cup\{j\})-v(S)\geq\sum_{i\in S\cup\{j\}}p_{i}-\sum_{i\in S}p_{i}=p_{j}=\epsilon
\]

\end_inset

 So we have 
\begin_inset Formula $v(j|S)\geq\epsilon$
\end_inset


\begin_inset Newline newline
\end_inset

But recall that we defined 
\begin_inset Formula $\epsilon$
\end_inset

 to be 
\begin_inset Formula $v(T\cup\{j\})-v(T)=v(j|T)$
\end_inset

.
 So we have:
\begin_inset Formula 
\[
v(j|S)\geq v(j|T)
\]

\end_inset

 Done 
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Subsection*
Part 3 - 
\begin_inset Formula $v$
\end_inset

 is GS implies it is greedy solvable, its demand query can be computed in
 
\begin_inset Formula $poly(m)$
\end_inset


\end_layout

\begin_layout Standard
First it is clear that a run of the 
\begin_inset Formula $\text{greedy algorithm}$
\end_inset

 takes poly time: The while loop runs for at most 
\begin_inset Formula $|M|$
\end_inset

 steps.
 In each step we must find the max marginal utility out of at most 
\begin_inset Formula $|M|$
\end_inset

 items (even if we re-compute the utility from scratch we still add at most
 a factor of 
\begin_inset Formula $|M|$
\end_inset

).
 Note we are assuming black-box valuations, that is: we can query a buyer's
 valuation in constant time.
 In total this is polynomial.
\begin_inset Newline newline
\end_inset

We now must show that the 
\begin_inset Formula $\text{greedy algorithm}$
\end_inset

 returns some bundle from 
\begin_inset Formula $D({\bf p})$
\end_inset

 for any price vector 
\begin_inset Formula ${\bf p}$
\end_inset

.
\begin_inset Newline newline
\end_inset


\series bold
Claim:
\series default
 When the 
\begin_inset Formula $\text{greedy algorithm}$
\end_inset

 halts, assume this occurs at some iteration 
\begin_inset Formula $t$
\end_inset

, the current 
\begin_inset Formula $S=S_{t}$
\end_inset

 belongs to 
\begin_inset Formula $D({\bf p})$
\end_inset

 .
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize

\series bold
No set smaller than 
\begin_inset Formula $S_{t}$
\end_inset

 has greater utility: 
\series default
First of all from 
\bar under
part 1
\bar default
 
\begin_inset Formula $S_{t}$
\end_inset

 is a set of size 
\begin_inset Formula $t$
\end_inset

 which maximizes utility, and so is every one of the bundles 
\begin_inset Formula $S_{k}$
\end_inset

 for 
\begin_inset Formula $k<t$
\end_inset

.
 As we only add items whose marginal utility is positive we know that the
 utility of 
\begin_inset Formula $S_{t}$
\end_inset

 is strictly larger than that of any of the previous sets, and because they
 are all optimal for their sizes we know that no set of a smaller size has
 greater utility than 
\begin_inset Formula $S_{t}$
\end_inset

.
 
\end_layout

\begin_layout Itemize

\series bold
No set larger than 
\begin_inset Formula $S_{t}$
\end_inset

 has greater utility: 
\series default
It is enough to show that no 
\begin_inset Formula $S_{k}$
\end_inset

 for 
\begin_inset Formula $k$
\end_inset

 larger than 
\begin_inset Formula $t$
\end_inset

 has greater utility as these have maximal utilities for their size.
 We have halted when the next optimal 
\begin_inset Formula $j$
\end_inset

 had non-positive utility, and so for all 
\begin_inset Formula $j\notin S_{t}$
\end_inset

 we have 
\begin_inset Formula $v(j|S_{t})-p_{j}\leq0$
\end_inset

.
 So it will not increase utility.
 We must make sure that it is not optimal to take this 
\begin_inset Formula $j$
\end_inset

 in order to enjoy a further increase in the future.
 Using 
\bar under
part 2
\bar default
 we use the submodularity of 
\begin_inset Formula $v$
\end_inset

, and the fact that for all 
\begin_inset Formula $k>t$
\end_inset

 
\begin_inset Formula $S_{t}\subseteq S_{k}$
\end_inset

, for all 
\begin_inset Formula $j\notin S_{t}$
\end_inset

 : 
\begin_inset Formula $v(j|S_{k})-p_{j}\leq v(j|S_{t})-p_{j}\leq0$
\end_inset

.
 So no further addition will increase utility.
\end_layout

\begin_layout Standard
Thus no set of larger or smaller size has greater utility, and 
\begin_inset Formula $S_{t}$
\end_inset

 has the greatest utility of sets of its size so 
\begin_inset Formula $S_{t}\in D({\bf p})$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Section*
Problem 2:
\end_layout

\begin_layout Standard
Our setting: 
\end_layout

\begin_layout Itemize
\begin_inset Formula $n$
\end_inset

 agents with corresponding 
\begin_inset Formula $v_{i}:2^{m}\rightarrow\mathbb{R}_{\geq0}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $m$
\end_inset

 items
\end_layout

\begin_layout Itemize
value 
\begin_inset Formula $r\in\mathbb{R}_{\geq0}$
\end_inset

, s.t: 
\begin_inset Formula $r:=max\sum_{i}v_{i}(S_{i})$
\end_inset

 , over all allocations
\end_layout

\begin_layout Standard
We will describe an algorithm that maximizes welfare and runs in 
\begin_inset Formula $poly(m,n)$
\end_inset


\end_layout

\begin_layout Subsubsection*
Our Linear-Program setting for maximizing welfare (reminder):
\end_layout

\begin_layout Standard
The primal 
\begin_inset Formula $(P)$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{maximize} & \sum_{i=1}^{n}\sum_{S\subseteq U}v_{i}(S)x_{iS}\\
\text{subject to:} & \ \ \forall j:\sum_{i=1}^{n}\sum_{S\subseteq U:j\in S}x_{iS}\leq1\\
 & \forall i:\ \sum_{S\subseteq U}x_{iS}\leq1
\end{align*}

\end_inset

 Its Dual 
\begin_inset Formula $(D)$
\end_inset

: 
\begin_inset Formula 
\begin{align*}
\text{minimize} & \sum_{i=1}^{n}u_{i}+\sum_{i=1}^{m}p_{j}\\
\text{subject to:} & \ \ \forall i\ \forall S\subseteq U:\ u_{i}+\sum_{j\in S}p_{j}\geq v_{i}(S)\\
 & \forall i:\ u_{i}\geq0\\
 & \forall j:\ p_{j}\geq0
\end{align*}

\end_inset


\end_layout

\begin_layout Subsubsection*
The Ellipsoid Algorithm:
\end_layout

\begin_layout Quotation
\begin_inset Quotes eld
\end_inset

Every linear program that admits a polynomial time [w.r.t number of variables,
 not constraints] separation oracle can be solved in polynomial time.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Where a separation oracle must:
\end_layout

\begin_layout Itemize
Receive as input some solution.
\end_layout

\begin_layout Itemize
Return [Feasible] or [Not Feasible + An example of some constraint violated].
\end_layout

\begin_layout Subsubsection*
A poly-time separation oracle for 
\begin_inset Formula $(D)$
\end_inset

:
\end_layout

\begin_layout Standard
On input 
\begin_inset Formula $({\bf p},{\bf u})$
\end_inset

:
\end_layout

\begin_layout Itemize
Check all nonnegativity constraints, if one is violated return it.
 
\begin_inset Formula $O(m+n)$
\end_inset

.
\end_layout

\begin_layout Itemize
We now move on to validate the exponential number of constraints of the
 form:
\begin_inset Formula 
\[
u_{i}+\sum_{j\in S}p_{j}\geq v_{i}(S)
\]

\end_inset

 Rearrange into: 
\begin_inset Formula 
\[
u_{i}\geq v_{i}(S)-\sum_{j\in S}p_{j}
\]

\end_inset

Notice that on the right side we have the utility for bundle 
\begin_inset Formula $S$
\end_inset

.
 We have previously proved that we can compute a demand query for GS valuations
 in polynomial time and obtain some 
\begin_inset Formula $S^{*}$
\end_inset

 that maximizes utility.
 For each bidder we will run such a demand query and obtain the corresponding
 
\begin_inset Formula $S^{*}$
\end_inset

.
 As on the left we always have 
\begin_inset Formula $u_{i}$
\end_inset

 and 
\begin_inset Formula $S^{*}$
\end_inset

 maximizes the right side, if some constraint is violated then the constraint
 involving 
\begin_inset Formula $S^{*}$
\end_inset

 must be violated too.
 And conversely, if this constraing is satisfied then all others must be
 satisfied too.
 Thus it is enough to check this one constraint and return [Feasible] if
 it is satisfied, or [Not Feasible + 
\begin_inset Formula $u_{i}\geq v_{i}(S^{*})-\sum_{j\in S^{*}p_{j}}$
\end_inset

] in case it is not.
 
\begin_inset Newline newline
\end_inset

In total: 
\begin_inset Formula $O(n\cdot poly(m))=poly(m,n)$
\end_inset


\end_layout

\begin_layout Standard
Thus there exists a polynomial separator for 
\begin_inset Formula $(D)$
\end_inset


\end_layout

\begin_layout Subsubsection*
Proof: 
\end_layout

\begin_layout Standard
Using strong duality we know that 
\begin_inset Formula $r$
\end_inset

 is also the optimal solution for 
\begin_inset Formula $(D)$
\end_inset

.
 And from the theorem seen in class we know that if there exists WE (and
 for the special case of GS valuations we know that it does) then this solution
 is also the solution for the integer programming problem.
 We now perform the following procedure 
\begin_inset Formula $m$
\end_inset

 items, once per item 
\begin_inset Formula $j$
\end_inset

:
\end_layout

\begin_layout Standard
For each bidder 
\begin_inset Formula $b_{i}$
\end_inset

: Assign item 
\begin_inset Formula $j$
\end_inset

 to bidder 
\begin_inset Formula $b_{i}$
\end_inset

.
 Compute the solution to the linear program resulting from this allocation
 (details below **) if the solution received is 
\begin_inset Formula $r$
\end_inset

 we know that item 
\begin_inset Formula $j$
\end_inset

 can be assigned to bidder 
\begin_inset Formula $j$
\end_inset

.
 We assign as such and continue to the next item.
 
\begin_inset Newline newline
\end_inset

**Which LP is received after allocating 
\begin_inset Formula $j$
\end_inset

 to bidder 
\begin_inset Formula $b_{i}$
\end_inset

?
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\text{maximize} & \sum_{i=1}^{n}\sum_{S\subseteq U\backslash\{j\}}v_{i}(S)x_{iS}\\
\text{subject to:} & \ \ \forall k:\sum_{i=1}^{n}\sum_{S\subseteq U\backslash\{j\}:k\in S}x_{iS}\leq1\\
 & \forall i:\ \sum_{S\subseteq U\backslash\{j\}}x_{iS}\leq1
\end{align*}

\end_inset

 And we define 
\begin_inset Formula $v_{i}$
\end_inset

 to be 
\begin_inset Formula $v_{i}(\cdot|\{j\})$
\end_inset

 which is GS over 
\begin_inset Formula $U\backslash\{j\}$
\end_inset

, proof:
\begin_inset Newline newline
\end_inset

Let there be some price vector 
\begin_inset Formula ${\bf p}_{-j}$
\end_inset

 and some set 
\begin_inset Formula $S\in D_{i}({\bf p}_{-j})$
\end_inset

 and some 
\begin_inset Formula ${\bf q}_{-j}\ge{\bf p}_{-j}$
\end_inset

.
 Let 
\begin_inset Formula $A$
\end_inset

 be the set of items whose price increased.
 We must show that there exists some 
\begin_inset Formula $T\subseteq U\backslash\{j\}$
\end_inset

 s.t 
\begin_inset Formula $(S\backslash A)\cup T\in D_{i}({\bf q}_{-j})$
\end_inset


\begin_inset Newline newline
\end_inset

We add a price of 
\begin_inset Formula $\infty$
\end_inset

 to item 
\begin_inset Formula $j$
\end_inset

 in both vectors resulting in 
\begin_inset Formula ${\bf p}$
\end_inset

 and 
\begin_inset Formula ${\bf q}$
\end_inset

.
 Then we know that for 
\begin_inset Formula $v_{i}(\cdot)$
\end_inset

 item 
\begin_inset Formula $j\notin D({\bf p}),D({\bf q})$
\end_inset

.
 And by GS of 
\begin_inset Formula $v_{i}$
\end_inset

 there exists some 
\begin_inset Formula $T\subseteq U$
\end_inset

 s.t 
\begin_inset Formula $(S\backslash A)\cup T\in D_{i}({\bf q})$
\end_inset

.
 We know that 
\begin_inset Formula $T\subseteq U\backslash\{j\}$
\end_inset

 because 
\begin_inset Formula $j$
\end_inset

 is not in any demand set.
 It is clear that this is also a solution for the first problem as the demand
 sets for 
\begin_inset Formula ${\bf q_{-j}}$
\end_inset

, 
\begin_inset Formula ${\bf q}$
\end_inset

 are the same when the price of 
\begin_inset Formula $j$
\end_inset

 is 
\begin_inset Formula $\infty$
\end_inset

.
\begin_inset Newline newline
\end_inset

Finally, all valuations in the new 
\begin_inset Formula $LP$
\end_inset

 are GS so we have a reduction of the original problem that can be solved
 with the method we have described (ellipsoid algorithm etc.).
 Thus 
\begin_inset Formula $m\cdot n$
\end_inset

 times we solve a problem we have shown to have a polynomial solution in
 
\begin_inset Formula $m,n$
\end_inset

 (note we have decreasing sizes of this problem at each iteration) So the
 total solution is polynomial.
\end_layout

\begin_layout Standard
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Part
Walrasian Equilibrium
\end_layout

\begin_layout Section*
Problem 3:
\end_layout

\begin_layout Subsection*
1
\end_layout

\begin_layout Subsubsection*
Difinitions:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $G=([n],[m])$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $G_{I}=([m],E,w)$
\end_inset

 where 
\begin_inset Formula $E=\{(j,j')|j,j'\in[m],j\ne j'\}$
\end_inset

 and where for the item 
\begin_inset Formula $j$
\end_inset

 that was chosen by 
\begin_inset Formula $i$
\end_inset

 in the matching 
\begin_inset Formula $M$
\end_inset

 it applies that 
\begin_inset Formula $w((j,j'))=u_{i}(\{j\})-u_{i}(\{j'\})$
\end_inset

 
\end_layout

\begin_layout Standard
Assume that the new graph has a negative cycles.
 We can then get a bettet weighted match! Denote 
\begin_inset Formula $\pi$
\end_inset

 as out cycle edges:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Sigma_{(j,j')\in\pi}v_{i}(j)-v_{i}(j')<0
\]

\end_inset


\end_layout

\begin_layout Standard
Denote the group of items on this cycle and their match as 
\begin_inset Formula $S=\{(i,j)|(i,j)\in M,\exists j'.(j,j')\in\pi\}$
\end_inset

, then the part of those vertices in the match sum is:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Sigma_{(i,j)\in S}v_{i}(j)
\]

\end_inset


\end_layout

\begin_layout Standard
But this is impossible, as we can improve this part if the sum only while
 using the current agent and items by switching the cycle direction and
 rotating the owners on the sycle by one in the original direction:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Sigma_{(j,j')\in\pi}v_{i}(j')-v_{i}(j)>0
\]

\end_inset


\end_layout

\begin_layout Standard
Denote the new group if items as 
\begin_inset Formula $S'$
\end_inset

 and we get that 
\begin_inset Formula $\Sigma_{(i,j)\in S}v_{i}(j)<\Sigma_{(i,j')\in S}v_{i}(j')$
\end_inset

! If so 
\begin_inset Formula $M$
\end_inset

 was not a max weighted match.
\end_layout

\begin_layout Standard
\begin_inset Formula $\square$
\end_inset


\end_layout

\begin_layout Subsubsection*
2
\end_layout

\begin_layout Standard
From the last section we know that if we switch the directoin of the edges
 on the cylce we will stay with the same match weighted value as in the
 original 
\begin_inset Formula $M$
\end_inset

.
 But it was explicitly said that 
\begin_inset Formula $M$
\end_inset

 is 
\series bold
unique
\series default
, and as such this is not possible.
\end_layout

\begin_layout Subsubsection*
3 ##################################### assume single item instead of multi
 items
\end_layout

\begin_layout Standard
First notice that we do not have any vertex in 
\begin_inset Formula $V_{i}$
\end_inset

 that it's min distance from 
\begin_inset Formula $s$
\end_inset

 is bigger then 
\begin_inset Formula $0$
\end_inset

.
 Secondly because we cannot return to 
\begin_inset Formula $s$
\end_inset

 we didnt create any new cycle in 
\begin_inset Formula $G_{i}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Another cool property is that every minimum path must start with a node
 with minimum distance of 
\begin_inset Formula $0$
\end_inset

.
 Assume it doesn't - then we can use the negative path to it to get our
 current path even lower.
\end_layout

\begin_layout Standard
Now assume we give the item the prices 
\begin_inset Formula $p_{j}=-d_{s\rightarrow j}$
\end_inset

.
 Using the same idea from before we can then conclude that for each prefix
 of the min path - it is also the min path to the prefix endpoint.
 The last item in the path is define as the item that the min distance 
\begin_inset Formula $+$
\end_inset

 the gain you would have from switching the agent 
\begin_inset Formula $i$
\end_inset

 item 
\begin_inset Formula $j$
\end_inset

 with item 
\begin_inset Formula $j'$
\end_inset

 is minimal.
\end_layout

\begin_layout Standard
Now, We wish to find prices 
\begin_inset Formula $P$
\end_inset

 such that the matching 
\begin_inset Formula $M$
\end_inset

 is which is a single item for each bidder is in the demand-set of each
 bidder.
 Formaly 
\begin_inset Formula $\forall i\in n.\{j\}\in\{S|\forall T\in[m].v_{i}(S)-p(S)\geq v_{i}(T)-p(T)\}$
\end_inset

.
\end_layout

\begin_layout Standard
To archive this we have to provide with prices such that for each 
\begin_inset Formula $(i,j)$
\end_inset

 in the match 
\begin_inset Formula $M$
\end_inset

 it holds that 
\begin_inset Formula $\forall T\in[m].v_{i}(j)-p_{j}\geq\Sigma_{j'\in T}v_{i}(j')-\Sigma_{j'\in T}p_{j'}$
\end_inset

.
\end_layout

\begin_layout Standard
Now we can show that the prices we chose 
\begin_inset Formula $p_{j}=-d_{s\rightarrow j}$
\end_inset

 provide us with the state! Assume that for some bidder 
\begin_inset Formula $i$
\end_inset

 there exist 
\begin_inset Formula $j'$
\end_inset

 such that 
\begin_inset Formula $v_{i}(\{j'\})-p_{j'}>v_{i}(\{j\})-p_{j}$
\end_inset

.
 Where 
\begin_inset Formula $j$
\end_inset

 is the item matched to 
\begin_inset Formula $i$
\end_inset

.
 This means that:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v_{i}(j')+d_{s\rightarrow j'}>v_{i}(j)+d_{s\rightarrow j}
\]

\end_inset


\end_layout

\begin_layout Standard
Which means:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
d_{s\rightarrow j'}>d_{s\rightarrow j}+v_{i}(j)-v_{i}(j')=d_{s\rightarrow j}+w((j,j'))\ge d_{s\rightarrow j'}
\]

\end_inset


\end_layout

\begin_layout Standard
This cannot be! And as such the prices a Walrasian prices.
\end_layout

\begin_layout Subsubsection*
4########################### assume single item instead of multi items
\end_layout

\begin_layout Standard
After computing the prices we might still have two set of items that get
 the same SW gain.
 To solve this we can look at each such case: Assume we have 
\begin_inset Formula $j$
\end_inset

 and 
\begin_inset Formula $j'$
\end_inset

 such that for 
\begin_inset Formula $(i,j)\in M$
\end_inset

 it holds that 
\begin_inset Formula $v_{i}(\{j'\})-p_{j'}=v_{i}(\{j\})-p_{j}$
\end_inset

.
\end_layout

\begin_layout Standard
We want to change the edges in such a way that it holds that 
\begin_inset Formula $v_{i}(\{j'\})-p_{j'}>v_{i}(\{j\})-p_{j}$
\end_inset

.
 We can do the following: 
\begin_inset Formula $p_{j}-p_{j'}\ge v_{i}(j)-v_{i}(j')=w((j,j'))>w((j,j'))-\epsilon$
\end_inset

; but removing 
\begin_inset Formula $\epsilon$
\end_inset

 from all the edge might couse as a .
 While this will indeed solve the problem, we cannot be sure of the resulting
 paths to be minimal any longer, as there might be negative cycles now.
 But this can be left aside as there were no 
\begin_inset Formula $0$
\end_inset

 cycles in the graph!
\end_layout

\begin_layout Section*
Problem 3b:###############from michal article.
 Maybe edit?
\end_layout

\begin_layout Standard
let's consider the following scheme: 3 items and 3 agent:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $v_{1}=[1,1,0]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $v_{2}=[1,0,1]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $v_{3}=[0,1,1]$
\end_inset


\end_layout

\begin_layout Standard
Assume that we have some prices 
\begin_inset Formula $p$
\end_inset

 and they are all less or equal then 1, then if 
\begin_inset Formula $p_{1}\ge p_{3}\ge p_{2}$
\end_inset

 then we get that if agent 1 arrive first and take 1, then agent 2 arrives
 and take 3, and then agent 3 arrive and find that there is no more element
 to take.
 This is a 
\begin_inset Formula $2/3$
\end_inset

 allocation.
 This show that for any fixed prices theme there is some order that leads
 to worst case of 
\begin_inset Formula $2/3$
\end_inset

 of the OPT!
\end_layout

\end_body
\end_document
